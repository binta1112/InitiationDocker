OpenStack pour monter un cloud privÃ©
Spark  

Il fut des hipervisor pour faire des machine virtuelle 
Les Hipervisor:
*KVM
*VMWARE
*Hyper-V
*VirtualBox

02 type d'Hypervisor : 1 a besoin de syteme d'exploitation et l'autre non 
 

 /************************CODE AVEC KLE API**************************************
 /*import http from 'http';

const server = http.createServer((req, res) => {
    
    if(req.method == 'POST'){
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('hello je suis en POST\n');
    }
    if(req.method == 'GET'){
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('hello je suis en GET\n');
    }
    
    console.log(req);
    //console.log(res);
 
});

server.listen(3000, 'localhost', () => {
  console.log('Server sur l url http://localhost:3000/');
});
server.on('error', (err) => {       
  console.error('Server error:', err);
});
*/

/*
const exp = require('express');
const app = exp();
app.get('/', (req, res) => {
  res.send('Hello je suis en GET en expresse\n');
});

app.post('/', (req, res) => {
    res.send('Hello je suis en POST en expresse\n');
  });

app.listen( 3000,() => {
  console.log(`Server sur l url http://localhost:3000/`);
});*/
require("dotenv").config();
const express = require("express");
const axios = require("axios");
const path = require("path");
const app = express();
const PORT = 3000;
const PEXELS_API_URL = "https://api.pexels.com/v1";// URL pour charger les photos
const PEXELS_API_KEY = process.env.PEXELS_API_KEY;// notre clÃ© API 

// Middleware pour ajouter l'API Key dans les headers
const apiClient = axios.create({
  baseURL: PEXELS_API_URL,
  headers: { Authorization: PEXELS_API_KEY },//pour acceder Ã  l'API
});

app.use(express.static(path.join(__dirname, "public")));

app.set("view engine", "ejs");
// Route pour rÃ©cupÃ©rer des photos populaires
app.get("/photos/popular", async (req, res) => {

  try 
  {
    //rÃ©cupÃ©ration d'une page alÃ©atoire
    const page = Math.floor(Math.random() * 100) + 1;
    //envoie de la requÃªte vers l'api pexels avec la limite de 10 photos 
    const response = await apiClient.get("/popular?", { params: { per_page: 10 , page:page} });
    //console.log(response.data);
    console.log(response.data.photos[0].src);

    const photos = response.data.photos.map((photo) => ({
      title: photo.photographer,
      url: photo.src.medium,
      description: photo.alt,
    }));
    //envoie des photos Ã  la vue index
    
    res.render("index", { photos });
   
  } 
  catch (error)
  {
    res.status(500).json({ error: "Erreur lors de la rÃ©cupÃ©ration des photos" });
  }
});


app.listen(PORT, () => {
  console.log(`ðŸš€ Serveur lancÃ© sur http://localhost:${PORT}/photos/popular`);
});
